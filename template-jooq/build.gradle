/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */
 
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE'
        classpath 'nu.studer:gradle-jooq-plugin:2.0.6'
    }
}
 

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'eclipse'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'nu.studer.jooq'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


ext {
	logbackSpringExtVersion 	= '0.1.4'
	sfmVersion 					= '3.11.8'
}

// dependency management
dependencyManagement {
    imports {
        mavenBom 'io.spring.platform:platform-bom:Athens-SR5'
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {

	// Spring 
	compile 'org.springframework:spring-webmvc'
	compile 'org.springframework:spring-jdbc'
	compile 'org.springframework:spring-context-support'
	
	// Servlet
	providedCompile 'javax.servlet:javax.servlet-api'
	providedCompile 'org.apache.taglibs:taglibs-standard-jstlel'
	compile 'javax.servlet:jstl'

    // The production code uses the SLF4J logging API at compile time
    // Logging
    compile 'ch.qos.logback:logback-classic'
    compile 'org.slf4j:jcl-over-slf4j'
	compile 'org.codehaus.janino:janino'
    compile "org.logback-extensions:logback-ext-spring:$logbackSpringExtVersion"
	
	// jackson
	compile 'com.fasterxml.jackson.core:jackson-databind'
	
	// hibernate validator
	compile 'org.hibernate:hibernate-validator'
	compile 'org.glassfish:javax.el'
	
	// Apache Commons
	compile 'commons-io:commons-io'
	compile 'org.apache.commons:commons-lang3'
	compile 'commons-beanutils:commons-beanutils'
	compile 'org.apache.httpcomponents:httpclient'
	compile 'commons-fileupload:commons-fileupload'
	
	// joda
	compile 'joda-time:joda-time'
	
	// jooq
	compile 'org.jooq:jooq'
	jooqRuntime 'org.mariadb.jdbc:mariadb-java-client'
	compile "org.simpleflatmapper:sfm-jooq:$sfmVersion"
	
	// DB Driver
	compile 'org.mariadb.jdbc:mariadb-java-client'
	compile 'mysql:mysql-connector-java'
	

	
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit'
    testCompile 'org.springframework:spring-test'
}


configurations {
    all {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    	exclude group: 'log4j', module: 'log4j'
    }
}

eclipse.wtp {
	facet {
		facets = []
		facet name: 'jst.java', version:"$sourceCompatibility"
		facet name: 'jst.web', version:'3.1'
		facet name: 'wst.jsdt.web', version:'1.0'
	}
	
	component.file {
		withXml {
			it.asNode()'wb-module'[0].children()
			    .findAll { it.name() == 'dependent-module' }
			    .findAll { it.attribute('handle').startsWith 'module:/resource' }
			    .each {
			        def jarName = it.attribute('handle').tokenize('/').last() + '.jar'
			        it.attributes().put('archiveName', jarName)
			     }
		}
	}
}
eclipse.jdt {
    sourceCompatibility = "$sourceCompatibility"
    targetCompatibility = "$targetCompatibility"
}




// Run the code generator
// https://www.jooq.org/doc/3.8/manual/code-generation/codegen-advanced/
task cleanGenerateSampleJooqSchemaSource() {
	doFirst {}
	doLast {}
}
jooq {
   sample(sourceSets.main) {
       jdbc {
           driver = 'org.mariadb.jdbc.Driver'
           url = 'jdbc:mariadb://localhost:3306/jooq'
           user = 'root'
           password = '123'
       }
       generator {
           strategy {
               name = 'org.jooq.util.DefaultGeneratorStrategy'
           }
           database {
               name = 'org.jooq.util.mariadb.MariaDBDatabase'
               inputSchema = 'jooq'
           }
           generate {
               relations = true
               deprecated = false
               records = true
               pojos = true
               fluentSetters = false
               
               daos = true
               springAnnotations = true
               validationAnnotations = true
           }
           target {
               packageName = 'com.kdemo.jooq.domain'
               directory = 'src/main/java'
           }
       }
   }
}
